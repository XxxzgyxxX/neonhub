local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Criar a janela principal do Neon Hub
local Window = Fluent:CreateWindow({
    Title = "Neon Hub v1.0",
    SubTitle = "by XxxzgyxxX",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Adicionar abas
local Tabs = {
    Main = Window:AddTab({ Title = "Principal", Icon = "home" }),
    Settings = Window:AddTab({ Title = "Configurações", Icon = "settings" })
}

local Options = Fluent.Options

-- Elementos da aba Principal
do
    -- Notificação de boas-vindas
    Fluent:Notify({
        Title = "Neon Hub",
        Content = "Bem-vindo ao Neon Hub!",
        SubContent = "Criado por XxxzgyxxX",
        Duration = 5
    })

    -- Parágrafo de introdução
    Tabs.Main:AddParagraph({
        Title = "Sobre",
        Content = "Neon Hub é uma interface poderosa para seus scripts no Roblox.\nPersonalize e aproveite!"
    })

    -- Botão de exemplo
    Tabs.Main:AddButton({
        Title = "Botão Exemplo",
        Description = "Clique para testar",
        Callback = function()
            Window:Dialog({
                Title = "Confirmação",
                Content = "Deseja executar esta ação?",
                Buttons = {
                    {
                        Title = "Sim",
                        Callback = function()
                            print("Ação confirmada!")
                        end
                    },
                    {
                        Title = "Cancelar",
                        Callback = function()
                            print("Ação cancelada!")
                        end
                    }
                }
            })
        end
    })

    -- Toggle (Alternador)
    local Toggle = Tabs.Main:AddToggle("NeonToggle", {
        Title = "Ativar Efeitos Neon",
        Default = false
    })

    Toggle:OnChanged(function()
        print("Efeitos Neon:", Options.NeonToggle.Value)
    end)

    -- Slider (Controle deslizante)
    local Slider = Tabs.Main:AddSlider("NeonIntensity", {
        Title = "Intensidade Neon",
        Description = "Ajuste o brilho dos efeitos",
        Default = 50,
        Min = 0,
        Max = 100,
        Rounding = 0,
        Callback = function(Value)
            print("Intensidade ajustada:", Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("Intensidade mudou:", Value)
    end)

    -- Dropdown (Menu suspenso)
    local Dropdown = Tabs.Main:AddDropdown("NeonColor", {
        Title = "Cor Neon",
        Values = {"Vermelho", "Azul", "Verde", "Roxo", "Amarelo", "Rosa", "Branco"},
        Multi = false,
        Default = "Azul"
    })

    Dropdown:OnChanged(function(Value)
        print("Cor selecionada:", Value)
    end)

    -- Seletor de cor
    local Colorpicker = Tabs.Main:AddColorpicker("CustomColor", {
        Title = "Cor Personalizada",
        Default = Color3.fromRGB(0, 255, 255)
    })

    Colorpicker:OnChanged(function()
        print("Cor personalizada alterada:", Colorpicker.Value)
    end)

    -- Atalho de teclado
    local Keybind = Tabs.Main:AddKeybind("ToggleKey", {
        Title = "Atalho para Alternar",
        Mode = "Toggle",
        Default = "F",
        Callback = function(Value)
            print("Interface alternada:", Value)
        end
    })

    -- Campo de entrada
    local Input = Tabs.Main:AddInput("PlayerName", {
        Title = "Nome do Jogador",
        Placeholder = "Digite um nome...",
        Numeric = false,
        Finished = false,
        Callback = function(Value)
            print("Nome digitado:", Value)
        end
    })
end

-- Configuração dos add-ons
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})

-- Definir pastas de configuração
InterfaceManager:SetFolder("NeonHub")
SaveManager:SetFolder("NeonHub/Configs")

-- Construir seções de interface
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- Selecionar a primeira aba e mostrar notificação final
Window:SelectTab(1)

Fluent:Notify({
    Title = "Neon Hub",
    Content = "Interface carregada com sucesso!",
    Duration = 5
})

-- Carregar configuração automática se existir
SaveManager:LoadAutoloadConfig()
